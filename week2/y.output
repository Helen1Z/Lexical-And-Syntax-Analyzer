Terminals unused in grammar

    LEKSH


Rules useless in parser due to conflicts

   31 expr: PRAG ')'


State 0 conflicts: 9 shift/reduce
State 12 conflicts: 1 shift/reduce
State 13 conflicts: 9 shift/reduce
State 19 conflicts: 14 reduce/reduce
State 30 conflicts: 10 shift/reduce
State 65 conflicts: 9 shift/reduce
State 67 conflicts: 9 shift/reduce
State 69 conflicts: 1 shift/reduce
State 70 conflicts: 1 shift/reduce
State 76 conflicts: 9 shift/reduce
State 77 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: ε
    2      | input lines
    3      | stmt_list

    4 stmt_list: stmt
    5          | stmt_list stmt

    6 stmt: oso_loop
    7     | gia_loop
    8     | expr ';'

    9 oso_loop: OSO '(' expr ')' '{' input '}'

   10 gia_loop: GIA '(' expr ';' expr ';' expr ')' '{' input '}'

   11 lines: lines expr '\n'
   12      | lines '\n'
   13      | ε

   14 expr: expr '+' expr
   15     | expr '-' expr
   16     | expr '*' expr
   17     | expr '/' expr
   18     | expr '<' expr
   19     | expr '>' expr
   20     | expr '=' expr
   21     | expr NEQ expr
   22     | expr EQ expr
   23     | expr LEQ expr
   24     | expr GEQ expr
   25     | AKER expr
   26     | PRAG expr
   27     | KYRIO_MEROS '(' ')' '{' input '}'
   28     | GRAPSE '(' AKER
   29     | PRAG ')'
   30     | DIABASE '(' AKER
   31     | PRAG ')'
   32     | EPESTREPSE '0'
   33     | '(' expr ')'
   34     | '-' expr
   35     | NUMBER


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 11 12
    '(' (40) 9 10 27 28 30 33
    ')' (41) 9 10 27 29 31 33
    '*' (42) 16
    '+' (43) 14
    '-' (45) 15 34
    '/' (47) 17
    '0' (48) 32
    ';' (59) 8 10
    '<' (60) 18
    '=' (61) 20
    '>' (62) 19
    '{' (123) 9 10 27
    '}' (125) 9 10 27
    error (256)
    NUMBER (258) 35
    NEQ (259) 21
    LEQ (260) 23
    GEQ (261) 24
    EQ (262) 22
    AKER (263) 25 28 30
    PRAG (264) 26 29 31
    LEKSH (265)
    OSO (266) 9
    GIA (267) 10
    KYRIO_MEROS (268) 27
    GRAPSE (269) 28
    DIABASE (270) 30
    EPESTREPSE (271) 32
    UMINUS (272)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    input (33)
        on left: 1 2 3
        on right: 0 2 9 10 27
    stmt_list (34)
        on left: 4 5
        on right: 3 5
    stmt (35)
        on left: 6 7 8
        on right: 4 5
    oso_loop (36)
        on left: 9
        on right: 6
    gia_loop (37)
        on left: 10
        on right: 7
    lines (38)
        on left: 11 12 13
        on right: 2 11 12
    expr (39)
        on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
        on right: 8 9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 33 34


State 0

    0 $accept: • input $end

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    OSO          shift, and go to state 4
    GIA          shift, and go to state 5
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    NUMBER       [reduce using rule 1 (input)]
    AKER         [reduce using rule 1 (input)]
    PRAG         [reduce using rule 1 (input)]
    KYRIO_MEROS  [reduce using rule 1 (input)]
    GRAPSE       [reduce using rule 1 (input)]
    DIABASE      [reduce using rule 1 (input)]
    EPESTREPSE   [reduce using rule 1 (input)]
    '-'          [reduce using rule 1 (input)]
    '('          [reduce using rule 1 (input)]
    $default     reduce using rule 1 (input)

    input      go to state 12
    stmt_list  go to state 13
    stmt       go to state 14
    oso_loop   go to state 15
    gia_loop   go to state 16
    expr       go to state 17


State 1

   35 expr: NUMBER •

    $default  reduce using rule 35 (expr)


State 2

   25 expr: AKER • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 18


State 3

   26 expr: PRAG • expr
   29     | PRAG • ')'
   31     | PRAG • ')'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11
    ')'          shift, and go to state 19

    expr  go to state 20


State 4

    9 oso_loop: OSO • '(' expr ')' '{' input '}'

    '('  shift, and go to state 21


State 5

   10 gia_loop: GIA • '(' expr ';' expr ';' expr ')' '{' input '}'

    '('  shift, and go to state 22


State 6

   27 expr: KYRIO_MEROS • '(' ')' '{' input '}'

    '('  shift, and go to state 23


State 7

   28 expr: GRAPSE • '(' AKER

    '('  shift, and go to state 24


State 8

   30 expr: DIABASE • '(' AKER

    '('  shift, and go to state 25


State 9

   32 expr: EPESTREPSE • '0'

    '0'  shift, and go to state 26


State 10

   34 expr: '-' • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 27


State 11

   33 expr: '(' • expr ')'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 28


State 12

    0 $accept: input • $end
    2 input: input • lines

    $end  shift, and go to state 29

    $end      [reduce using rule 13 (lines)]
    $default  reduce using rule 13 (lines)

    lines  go to state 30


State 13

    3 input: stmt_list •
    5 stmt_list: stmt_list • stmt

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    OSO          shift, and go to state 4
    GIA          shift, and go to state 5
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    NUMBER       [reduce using rule 3 (input)]
    AKER         [reduce using rule 3 (input)]
    PRAG         [reduce using rule 3 (input)]
    KYRIO_MEROS  [reduce using rule 3 (input)]
    GRAPSE       [reduce using rule 3 (input)]
    DIABASE      [reduce using rule 3 (input)]
    EPESTREPSE   [reduce using rule 3 (input)]
    '-'          [reduce using rule 3 (input)]
    '('          [reduce using rule 3 (input)]
    $default     reduce using rule 3 (input)

    stmt      go to state 31
    oso_loop  go to state 15
    gia_loop  go to state 16
    expr      go to state 17


State 14

    4 stmt_list: stmt •

    $default  reduce using rule 4 (stmt_list)


State 15

    6 stmt: oso_loop •

    $default  reduce using rule 6 (stmt)


State 16

    7 stmt: gia_loop •

    $default  reduce using rule 7 (stmt)


State 17

    8 stmt: expr • ';'
   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42
    ';'  shift, and go to state 43


State 18

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr
   25     | AKER expr •

    $default  reduce using rule 25 (expr)


State 19

   29 expr: PRAG ')' •
   31     | PRAG ')' •

    NEQ       reduce using rule 29 (expr)
    NEQ       [reduce using rule 31 (expr)]
    LEQ       reduce using rule 29 (expr)
    LEQ       [reduce using rule 31 (expr)]
    GEQ       reduce using rule 29 (expr)
    GEQ       [reduce using rule 31 (expr)]
    EQ        reduce using rule 29 (expr)
    EQ        [reduce using rule 31 (expr)]
    '+'       reduce using rule 29 (expr)
    '+'       [reduce using rule 31 (expr)]
    '-'       reduce using rule 29 (expr)
    '-'       [reduce using rule 31 (expr)]
    '*'       reduce using rule 29 (expr)
    '*'       [reduce using rule 31 (expr)]
    '/'       reduce using rule 29 (expr)
    '/'       [reduce using rule 31 (expr)]
    '<'       reduce using rule 29 (expr)
    '<'       [reduce using rule 31 (expr)]
    '>'       reduce using rule 29 (expr)
    '>'       [reduce using rule 31 (expr)]
    '='       reduce using rule 29 (expr)
    '='       [reduce using rule 31 (expr)]
    ';'       reduce using rule 29 (expr)
    ';'       [reduce using rule 31 (expr)]
    ')'       reduce using rule 29 (expr)
    ')'       [reduce using rule 31 (expr)]
    '\n'      reduce using rule 29 (expr)
    '\n'      [reduce using rule 31 (expr)]
    $default  reduce using rule 29 (expr)


State 20

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr
   26     | PRAG expr •

    $default  reduce using rule 26 (expr)


State 21

    9 oso_loop: OSO '(' • expr ')' '{' input '}'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 44


State 22

   10 gia_loop: GIA '(' • expr ';' expr ';' expr ')' '{' input '}'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 45


State 23

   27 expr: KYRIO_MEROS '(' • ')' '{' input '}'

    ')'  shift, and go to state 46


State 24

   28 expr: GRAPSE '(' • AKER

    AKER  shift, and go to state 47


State 25

   30 expr: DIABASE '(' • AKER

    AKER  shift, and go to state 48


State 26

   32 expr: EPESTREPSE '0' •

    $default  reduce using rule 32 (expr)


State 27

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr
   34     | '-' expr •

    $default  reduce using rule 34 (expr)


State 28

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr
   33     | '(' expr • ')'

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42
    ')'  shift, and go to state 49


State 29

    0 $accept: input $end •

    $default  accept


State 30

    2 input: input lines •
   11 lines: lines • expr '\n'
   12      | lines • '\n'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11
    '\n'         shift, and go to state 50

    NUMBER       [reduce using rule 2 (input)]
    AKER         [reduce using rule 2 (input)]
    PRAG         [reduce using rule 2 (input)]
    KYRIO_MEROS  [reduce using rule 2 (input)]
    GRAPSE       [reduce using rule 2 (input)]
    DIABASE      [reduce using rule 2 (input)]
    EPESTREPSE   [reduce using rule 2 (input)]
    '-'          [reduce using rule 2 (input)]
    '('          [reduce using rule 2 (input)]
    '\n'         [reduce using rule 2 (input)]
    $default     reduce using rule 2 (input)

    expr  go to state 51


State 31

    5 stmt_list: stmt_list stmt •

    $default  reduce using rule 5 (stmt_list)


State 32

   21 expr: expr NEQ • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 52


State 33

   23 expr: expr LEQ • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 53


State 34

   24 expr: expr GEQ • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 54


State 35

   22 expr: expr EQ • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 55


State 36

   14 expr: expr '+' • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 56


State 37

   15 expr: expr '-' • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 57


State 38

   16 expr: expr '*' • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 58


State 39

   17 expr: expr '/' • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 59


State 40

   18 expr: expr '<' • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 60


State 41

   19 expr: expr '>' • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 61


State 42

   20 expr: expr '=' • expr

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 62


State 43

    8 stmt: expr ';' •

    $default  reduce using rule 8 (stmt)


State 44

    9 oso_loop: OSO '(' expr • ')' '{' input '}'
   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42
    ')'  shift, and go to state 63


State 45

   10 gia_loop: GIA '(' expr • ';' expr ';' expr ')' '{' input '}'
   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42
    ';'  shift, and go to state 64


State 46

   27 expr: KYRIO_MEROS '(' ')' • '{' input '}'

    '{'  shift, and go to state 65


State 47

   28 expr: GRAPSE '(' AKER •

    $default  reduce using rule 28 (expr)


State 48

   30 expr: DIABASE '(' AKER •

    $default  reduce using rule 30 (expr)


State 49

   33 expr: '(' expr ')' •

    $default  reduce using rule 33 (expr)


State 50

   12 lines: lines '\n' •

    $default  reduce using rule 12 (lines)


State 51

   11 lines: lines expr • '\n'
   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ   shift, and go to state 32
    LEQ   shift, and go to state 33
    GEQ   shift, and go to state 34
    EQ    shift, and go to state 35
    '+'   shift, and go to state 36
    '-'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '<'   shift, and go to state 40
    '>'   shift, and go to state 41
    '='   shift, and go to state 42
    '\n'  shift, and go to state 66


State 52

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   21     | expr NEQ expr •
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    $default  reduce using rule 21 (expr)


State 53

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   23     | expr LEQ expr •
   24     | expr • GEQ expr

    $default  reduce using rule 23 (expr)


State 54

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr
   24     | expr GEQ expr •

    $default  reduce using rule 24 (expr)


State 55

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   22     | expr EQ expr •
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    $default  reduce using rule 22 (expr)


State 56

   14 expr: expr • '+' expr
   14     | expr '+' expr •
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42

    $default  reduce using rule 14 (expr)


State 57

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   15     | expr '-' expr •
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42

    $default  reduce using rule 15 (expr)


State 58

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   16     | expr '*' expr •
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42

    $default  reduce using rule 16 (expr)


State 59

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   17     | expr '/' expr •
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42

    $default  reduce using rule 17 (expr)


State 60

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   18     | expr '<' expr •
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35

    $default  reduce using rule 18 (expr)


State 61

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   19     | expr '>' expr •
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35

    $default  reduce using rule 19 (expr)


State 62

   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   20     | expr '=' expr •
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35

    $default  reduce using rule 20 (expr)


State 63

    9 oso_loop: OSO '(' expr ')' • '{' input '}'

    '{'  shift, and go to state 67


State 64

   10 gia_loop: GIA '(' expr ';' • expr ';' expr ')' '{' input '}'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 68


State 65

   27 expr: KYRIO_MEROS '(' ')' '{' • input '}'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    OSO          shift, and go to state 4
    GIA          shift, and go to state 5
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    NUMBER       [reduce using rule 1 (input)]
    AKER         [reduce using rule 1 (input)]
    PRAG         [reduce using rule 1 (input)]
    KYRIO_MEROS  [reduce using rule 1 (input)]
    GRAPSE       [reduce using rule 1 (input)]
    DIABASE      [reduce using rule 1 (input)]
    EPESTREPSE   [reduce using rule 1 (input)]
    '-'          [reduce using rule 1 (input)]
    '('          [reduce using rule 1 (input)]
    $default     reduce using rule 1 (input)

    input      go to state 69
    stmt_list  go to state 13
    stmt       go to state 14
    oso_loop   go to state 15
    gia_loop   go to state 16
    expr       go to state 17


State 66

   11 lines: lines expr '\n' •

    $default  reduce using rule 11 (lines)


State 67

    9 oso_loop: OSO '(' expr ')' '{' • input '}'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    OSO          shift, and go to state 4
    GIA          shift, and go to state 5
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    NUMBER       [reduce using rule 1 (input)]
    AKER         [reduce using rule 1 (input)]
    PRAG         [reduce using rule 1 (input)]
    KYRIO_MEROS  [reduce using rule 1 (input)]
    GRAPSE       [reduce using rule 1 (input)]
    DIABASE      [reduce using rule 1 (input)]
    EPESTREPSE   [reduce using rule 1 (input)]
    '-'          [reduce using rule 1 (input)]
    '('          [reduce using rule 1 (input)]
    $default     reduce using rule 1 (input)

    input      go to state 70
    stmt_list  go to state 13
    stmt       go to state 14
    oso_loop   go to state 15
    gia_loop   go to state 16
    expr       go to state 17


State 68

   10 gia_loop: GIA '(' expr ';' expr • ';' expr ')' '{' input '}'
   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42
    ';'  shift, and go to state 71


State 69

    2 input: input • lines
   27 expr: KYRIO_MEROS '(' ')' '{' input • '}'

    '}'  shift, and go to state 72

    '}'       [reduce using rule 13 (lines)]
    $default  reduce using rule 13 (lines)

    lines  go to state 30


State 70

    2 input: input • lines
    9 oso_loop: OSO '(' expr ')' '{' input • '}'

    '}'  shift, and go to state 73

    '}'       [reduce using rule 13 (lines)]
    $default  reduce using rule 13 (lines)

    lines  go to state 30


State 71

   10 gia_loop: GIA '(' expr ';' expr ';' • expr ')' '{' input '}'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    expr  go to state 74


State 72

   27 expr: KYRIO_MEROS '(' ')' '{' input '}' •

    $default  reduce using rule 27 (expr)


State 73

    9 oso_loop: OSO '(' expr ')' '{' input '}' •

    $default  reduce using rule 9 (oso_loop)


State 74

   10 gia_loop: GIA '(' expr ';' expr ';' expr • ')' '{' input '}'
   14 expr: expr • '+' expr
   15     | expr • '-' expr
   16     | expr • '*' expr
   17     | expr • '/' expr
   18     | expr • '<' expr
   19     | expr • '>' expr
   20     | expr • '=' expr
   21     | expr • NEQ expr
   22     | expr • EQ expr
   23     | expr • LEQ expr
   24     | expr • GEQ expr

    NEQ  shift, and go to state 32
    LEQ  shift, and go to state 33
    GEQ  shift, and go to state 34
    EQ   shift, and go to state 35
    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    '<'  shift, and go to state 40
    '>'  shift, and go to state 41
    '='  shift, and go to state 42
    ')'  shift, and go to state 75


State 75

   10 gia_loop: GIA '(' expr ';' expr ';' expr ')' • '{' input '}'

    '{'  shift, and go to state 76


State 76

   10 gia_loop: GIA '(' expr ';' expr ';' expr ')' '{' • input '}'

    NUMBER       shift, and go to state 1
    AKER         shift, and go to state 2
    PRAG         shift, and go to state 3
    OSO          shift, and go to state 4
    GIA          shift, and go to state 5
    KYRIO_MEROS  shift, and go to state 6
    GRAPSE       shift, and go to state 7
    DIABASE      shift, and go to state 8
    EPESTREPSE   shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    NUMBER       [reduce using rule 1 (input)]
    AKER         [reduce using rule 1 (input)]
    PRAG         [reduce using rule 1 (input)]
    KYRIO_MEROS  [reduce using rule 1 (input)]
    GRAPSE       [reduce using rule 1 (input)]
    DIABASE      [reduce using rule 1 (input)]
    EPESTREPSE   [reduce using rule 1 (input)]
    '-'          [reduce using rule 1 (input)]
    '('          [reduce using rule 1 (input)]
    $default     reduce using rule 1 (input)

    input      go to state 77
    stmt_list  go to state 13
    stmt       go to state 14
    oso_loop   go to state 15
    gia_loop   go to state 16
    expr       go to state 17


State 77

    2 input: input • lines
   10 gia_loop: GIA '(' expr ';' expr ';' expr ')' '{' input • '}'

    '}'  shift, and go to state 78

    '}'       [reduce using rule 13 (lines)]
    $default  reduce using rule 13 (lines)

    lines  go to state 30


State 78

   10 gia_loop: GIA '(' expr ';' expr ';' expr ')' '{' input '}' •

    $default  reduce using rule 10 (gia_loop)
